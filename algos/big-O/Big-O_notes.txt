Objectives:

Motivate the need for something like Big O Notation
Describe what Big O Notation is
Simplify Big O Expressions
Define "time complexity" and "space complexity"
Evaluate the time complexity and space complexity of different algorithms using Big O Notation
Describe what a logarithm is


What's the idea here?

Imagine we have multiple implementations of the same function.
How can we determine which one is the "best?"


Who Cares?

It's important to have a precise vocabulary to talk about how our code performs
Useful for discussing trade-offs between different approaches
When your code slows down or crashes, identifying parts of the code that are inefficient can help us find pain points in our applications
Less important: it comes up in interviews!


What does better mean?

Faster?
Less memory-intensive?
More readable?


The Problem with Time

Different machines will record different times
The same machine will record different times!
For fast algorithms, speed measurements may not be precise enough?


If not time, then what?

Rather than counting seconds, which are so variable...
Let's count the number of simple operations the computer has to perform!


Introducing....Big O

Big O Notation is a way to formalize fuzzy counting
It allows us to talk formally about how the runtime of an algorithm grows as the inputs grow
We won't care about the details, only the trends


Big O Definition

We say that an algorithm is O(f(n)) if the number of simple operations the computer has to do is eventually less than a constant times f(n), as n increases
f(n) could be linear (f(n) = n)
f(n) could be quadratic (f(n) = n  )
f(n) could be constant (f(n) = 1)
f(n) could be something entirely different!


Big O Shorthands

Arithmetic operations are constant
Variable assignment is constant
Accessing elements in an array (by index) or object (by key) is constant
In a loop, the the complexity is the length of the loop times the complexity of whatever happens inside of the loop